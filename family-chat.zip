# Family Messenger – Full‑Stack Web App (React + Node/Socket.IO)

Below is a minimal yet production‑ready family chat app with rooms keyed by a shared **Family Code**. It includes:

- **Server**: Node.js + Express + Socket.IO
- **Client**: React + Vite + Tailwind (optional) + socket.io‑client
- **Features**: join by family code & display name, real‑time messages, online presence, basic persistence in JSON file (server), message history fetch, typing indicator, and lightweight moderation (blocklist).

> Tip: You can deploy the server on Render/Fly/Heroku and host the client on Netlify/Vercel. Update the `VITE_SERVER_URL` accordingly.

---

## File Tree
```
family-messenger/
  server/
    package.json
    index.js
    persistence.js
    blocklist.json
    messages.json   # auto‑created
  client/
    index.html
    package.json
    vite.config.js
    tailwind.config.js
    postcss.config.js
    src/
      main.jsx
      App.jsx
      api.js
      socket.js
      hooks/useLocalStorage.js
      components/
        JoinForm.jsx
        ChatRoom.jsx
        Message.jsx
        TypingIndicator.jsx
        PresenceBar.jsx
    src/styles.css
  README.md
```

---

## server/package.json
```json
{
  "name": "family-messenger-server",
  "version": "1.0.0",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "NODE_ENV=development node index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "socket.io": "^4.7.5"
  }
}
```

## server/persistence.js
```js
import { readFileSync, writeFileSync, existsSync } from 'fs';

const MSG_PATH = new URL('./messages.json', import.meta.url).pathname;

export function loadMessages() {
  if (!existsSync(MSG_PATH)) return {};
  try { return JSON.parse(readFileSync(MSG_PATH, 'utf-8')); }
  catch { return {}; }
}

export function saveMessages(db) {
  try { writeFileSync(MSG_PATH, JSON.stringify(db, null, 2)); }
  catch (e) { console.error('Failed to persist messages:', e.message); }
}
```

## server/blocklist.json
```json
{
  "words": ["badword1", "badword2"]
}
```

## server/index.js
```js
import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import { loadMessages, saveMessages } from './persistence.js';
import { readFileSync } from 'fs';

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*'} });

app.use(cors());
app.use(express.json());

const blocklist = JSON.parse(readFileSync(new URL('./blocklist.json', import.meta.url), 'utf-8')).words || [];
const db = loadMessages(); // { [familyCode]: [{ id, user, text, ts }] }
const presence = new Map(); // familyCode -> Set(displayName)

function sanitize(text) {
  let out = text;
  for (const w of blocklist) {
    const re = new RegExp(`\\b${w.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'gi');
    out = out.replace(re, '***');
  }
  return out.slice(0, 2000);
}

app.get('/api/health', (_req, res) => res.json({ ok: true }));

app.get('/api/history', (req, res) => {
  const family = (req.query.family || '').trim();
  if (!family) return res.status(400).json({ error: 'family is required' });
  const msgs = db[family] || [];
  res.json({ messages: msgs.slice(-200) });
});

io.on('connection', (socket) => {
  let family = null;
  let user = null;

  socket.on('join', ({ familyCode, displayName }) => {
    family = String(familyCode || '').trim();
    user = String(displayName || 'Guest').trim().slice(0, 40);
    if (!family) return;

    socket.join(family);
    if (!presence.has(family)) presence.set(family, new Set());
    presence.get(family).add(user);
    io.to(family).emit('presence', Array.from(presence.get(family)));

    // send last messages to the new client (server‑side emit to this socket)
    const msgs = db[family] || [];
    socket.emit('history', msgs.slice(-50));
  });

  socket.on('typing', (isTyping) => {
    if (!family || !user) return;
    socket.to(family).emit('typing', { user, isTyping: !!isTyping });
  });

  socket.on('message', (payload) => {
    if (!family || !user) return;
    const text = sanitize(String(payload?.text || ''));
    if (!text) return;
    const msg = { id: `${Date.now()}-${Math.random().toString(36).slice(2,7)}`, user, text, ts: Date.now() };
    db[family] = db[family] || [];
    db[family].push(msg);
    if (db[family].length > 1000) db[family] = db[family].slice(-500);
    saveMessages(db);
    io.to(family).emit('message', msg);
  });

  socket.on('disconnect', () => {
    if (family && user && presence.has(family)) {
      const set = presence.get(family);
      set.delete(user);
      io.to(family).emit('presence', Array.from(set));
      if (set.size === 0) presence.delete(family);
    }
  });
});

const PORT = process.env.PORT || 5174;
server.listen(PORT, () => console.log(`Server listening on :${PORT}`));
```

---

## client/package.json
```json
{
  "name": "family-messenger-client",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --port 5173"
  },
  "dependencies": {
    "socket.io-client": "^4.7.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.3",
    "vite": "^5.2.0"
  }
}
```

## client/vite.config.js
```js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': { target: 'http://localhost:5174', changeOrigin: true },
      '/socket.io': { target: 'http://localhost:5174', ws: true }
    }
  }
})
```

## client/tailwind.config.js
```js
export default {
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: { extend: {} },
  plugins: []
}
```

## client/postcss.config.js
```js
export default { plugins: { tailwindcss: {}, autoprefixer: {} } }
```

## client/index.html
```html
<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Family Messenger</title>
  </head>
  <body class="bg-gray-50">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

## client/src/styles.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
```

## client/src/main.jsx
```jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles.css'

createRoot(document.getElementById('root')).render(<App />)
```

## client/src/api.js
```js
export async function fetchHistory(family) {
  const res = await fetch(`/api/history?family=${encodeURIComponent(family)}`)
  if (!res.ok) throw new Error('Failed to load history')
  return res.json()
}
```

## client/src/socket.js
```js
import { io } from 'socket.io-client'

const serverUrl = import.meta.env.VITE_SERVER_URL || '' // same origin in dev via proxy

export function createSocket() {
  return io(serverUrl, { transports: ['websocket'] })
}
```

## client/src/hooks/useLocalStorage.js
```js
import { useState, useEffect } from 'react'

export function useLocalStorage(key, initialValue) {
  const [value, setValue] = useState(() => {
    try {
      const v = localStorage.getItem(key)
      return v ? JSON.parse(v) : initialValue
    } catch { return initialValue }
  })
  useEffect(() => {
    try { localStorage.setItem(key, JSON.stringify(value)) } catch {}
  }, [key, value])
  return [value, setValue]
}
```

## client/src/components/JoinForm.jsx
```jsx
import React, { useState } from 'react'

export default function JoinForm({ onJoin, defaultFamily = '' }) {
  const [family, setFamily] = useState(defaultFamily)
  const [name, setName] = useState('')

  return (
    <div className="max-w-md mx-auto mt-20 p-6 bg-white rounded-2xl shadow">
      <h1 className="text-2xl font-semibold mb-4 text-center">Family Messenger</h1>
      <label className="block text-sm mb-1">Family Code</label>
      <input className="w-full border rounded px-3 py-2 mb-3" value={family} onChange={e=>setFamily(e.target.value)} placeholder="e.g. MICHAELY2025" />

      <label className="block text-sm mb-1">Your Name</label>
      <input className="w-full border rounded px-3 py-2 mb-4" value={name} onChange={e=>setName(e.target.value)} placeholder="e.g. Liran" />

      <button onClick={()=> onJoin({ family, name }) } className="w-full py-2 rounded-xl bg-black text-white hover:opacity-90">Join</button>
      <p className="text-xs text-gray-500 mt-3">Share the same Family Code with relatives to chat in the same room.</p>
    </div>
  )
}
```

## client/src/components/PresenceBar.jsx
```jsx
export default function PresenceBar({ users = [] }) {
  return (
    <div className="text-xs text-gray-600 py-2 border-b bg-white px-3 sticky top-0">Online: {users.join(', ') || '—'}</div>
  )
}
```

## client/src/components/TypingIndicator.jsx
```jsx
export default function TypingIndicator({ who = [] }) {
  if (!who.length) return null
  const text = who.length === 1 ? `${who[0]} is typing…` : `${who.join(', ')} are typing…`
  return <div className="text-xs text-gray-500 px-3 py-1">{text}</div>
}
```

## client/src/components/Message.jsx
```jsx
export default function Message({ m, me }) {
  const isMe = m.user === me
  return (
    <div className={`flex ${isMe ? 'justify-end' : 'justify-start'} my-1 px-2`}>
      <div className={`max-w-[75%] px-3 py-2 rounded-2xl shadow-sm ${isMe ? 'bg-black text-white rounded-br-sm' : 'bg-white rounded-bl-sm'}`}>
        <div className="text-xs opacity-70">{m.user}</div>
        <div className="whitespace-pre-wrap break-words">{m.text}</div>
        <div className="text-[10px] opacity-50 text-right mt-1">{new Date(m.ts).toLocaleTimeString()}</div>
      </div>
    </div>
  )
}
```

## client/src/components/ChatRoom.jsx
```jsx
import React, { useEffect, useMemo, useRef, useState } from 'react'
import Message from './Message'
import TypingIndicator from './TypingIndicator'
import PresenceBar from './PresenceBar'
import { fetchHistory } from '../api'

export default function ChatRoom({ socket, family, me, onLeave }) {
  const [messages, setMessages] = useState([])
  const [presence, setPresence] = useState([])
  const [typing, setTyping] = useState(new Set())
  const [text, setText] = useState('')
  const bottomRef = useRef()

  useEffect(() => {
    let mounted = true
    fetchHistory(family).then(({ messages }) => mounted && setMessages(messages)).catch(()=>{})
    return () => { mounted = false }
  }, [family])

  useEffect(() => {
    if (!socket) return

    const onHistory = (msgs) => setMessages(msgs)
    const onMessage = (m) => setMessages(prev => [...prev, m])
    const onPresence = (users) => setPresence(users)
    const onTyping = ({ user, isTyping }) => {
      setTyping(prev => {
        const p = new Set(prev)
        if (isTyping) p.add(user); else p.delete(user)
        return p
      })
    }

    socket.on('history', onHistory)
    socket.on('message', onMessage)
    socket.on('presence', onPresence)
    socket.on('typing', onTyping)

    return () => {
      socket.off('history', onHistory)
      socket.off('message', onMessage)
      socket.off('presence', onPresence)
      socket.off('typing', onTyping)
    }
  }, [socket])

  useEffect(() => { bottomRef.current?.scrollIntoView({ behavior: 'smooth' }) }, [messages])

  function send() {
    const t = text.trim()
    if (!t) return
    socket.emit('message', { text: t })
    setText('')
    socket.emit('typing', false)
  }

  function handleTyping(val) {
    setText(val)
    socket.emit('typing', !!val)
  }

  const typingList = useMemo(() => Array.from(typing).filter(u => u !== me), [typing, me])

  return (
    <div className="h-screen flex flex-col">
      <div className="flex items-center justify-between p-3 border-b bg-white sticky top-0">
        <div className="font-semibold">Family: {family}</div>
        <button onClick={onLeave} className="text-sm underline">Leave</button>
      </div>
      <PresenceBar users={presence} />
      <div className="flex-1 overflow-y-auto">
        {messages.map(m => <Message key={m.id} m={m} me={me} />)}
        <div ref={bottomRef} />
      </div>
      <TypingIndicator who={typingList} />
      <div className="p-3 border-t bg-white flex gap-2">
        <textarea value={text} onChange={e=>handleTyping(e.target.value)} rows={2} placeholder="Type a message" className="flex-1 border rounded-xl px-3 py-2 resize-none" />
        <button onClick={send} className="px-4 rounded-xl bg-black text-white">Send</button>
      </div>
    </div>
  )
}
```

## client/src/App.jsx
```jsx
import React from 'react'
import JoinForm from './components/JoinForm'
import ChatRoom from './components/ChatRoom'
import { createSocket } from './socket'
import { useLocalStorage } from './hooks/useLocalStorage'

export default function App() {
  const [session, setSession] = useLocalStorage('family-messenger.session', null)
  const socketRef = React.useRef(null)

  function handleJoin({ family, name }) {
    if (!family || !name) return
    socketRef.current = createSocket()
    socketRef.current.emit('join', { familyCode: family, displayName: name })
    setSession({ family, name })
  }

  function handleLeave() {
    socketRef.current?.disconnect()
    socketRef.current = null
    setSession(null)
  }

  if (!session) return <JoinForm onJoin={handleJoin} />
  return <ChatRoom socket={socketRef.current} family={session.family} me={session.name} onLeave={handleLeave} />
}
```

---

## README.md
```md
# Family Messenger

A tiny real‑time chat for families. Join with a shared **Family Code** and a display name.

## 1) Run locally
```bash
# in one shell
cd server && npm i && npm run dev
# in another shell
cd ../client && npm i && npm run dev
```
Open http://localhost:5173 and share with relatives on your network.

> The dev proxy in `vite.config.js` forwards `/api` and WebSocket traffic to the server.

## 2) Configure env for production
- Set `VITE_SERVER_URL` in the client build to your server origin (e.g., `https://your‑server.example.com`).
- Serve the client via static hosting (Netlify/Vercel) and the server on Render/Fly/Heroku.

## 3) Security notes
- This sample is **not** authenticated; it trusts the family code. For private deployments, add: 
  - invite links or passcodes per family
  - JWT sessions (via a simple email‑magic‑link provider) or one‑time PIN
  - message encryption at rest (server) and optionally end‑to‑end via libs like Signal Protocol (advanced)
- `blocklist.json` does basic word masking; expand for your needs.

## 4) Backups
- Messages persist to `server/messages.json`. For production, switch to a DB (SQLite/Postgres). 

## 5) Optional enhancements
- Image/file uploads (signed URLs)
- Read receipts
- Push notifications (service workers)
- Multi‑room (per sub‑family): `family:room` keys
- Admin tools (mute/kick, pin messages)
```
